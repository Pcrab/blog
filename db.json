{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/cloudflare-tunnel.md","hash":"d7a3dab3d421d00946f6140c5fc6e19628e94123","modified":1680954897710},{"_id":"source/_posts/document-thought.md","hash":"607cc362436c8f56fa207847005e6bb6493e09e2","modified":1680952069691},{"_id":"source/_posts/user-friendly-dark-mode.md","hash":"755494e9481bca0c1ab97889e3506ef60bf1b444","modified":1680944737184},{"_id":"source/_posts/unicode-normalize.md","hash":"69358ad946ade4914c7bb4824e7e2f67fa80235f","modified":1680941839552},{"_id":"source/search/index.md","hash":"fd88dd9292c19a72af83a6a0d2c6be117ea66f62","modified":1680843439222},{"_id":"source/about/index.md","hash":"8c74008daf8c0a9f7d91ffe6e73fd5eafdb04e48","modified":1680843439219},{"_id":"source/tags/index.md","hash":"a71ddf8d04c4bcf29ed91faced8fb44159b8e18f","modified":1680843439221}],"Category":[{"name":"技术向","_id":"clg9eeya60004hupk04du0jho"},{"name":"思考分享","_id":"clg9eeya90008hupkgt2f4jd2"},{"name":"小知识","_id":"clg9eeya9000bhupk6m508aed"}],"Data":[],"Page":[{"title":"search","date":"2022-09-18T08:43:18.000Z","layout":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2022-09-18 16:43:18\nlayout: search\n---\n","updated":"2023-04-07T04:57:19.222Z","path":"search/index.html","comments":1,"_id":"clg9eeya10000hupkf2gncmz1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-09-18T08:43:15.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-09-18 16:43:15\nlayout: about\n---\n","updated":"2023-04-07T04:57:19.219Z","path":"about/index.html","comments":1,"_id":"clg9eeya50002hupka55hgne0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-09-18T08:43:11.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-09-18 16:43:11\nlayout: tags\n---\n","updated":"2023-04-07T04:57:19.221Z","path":"tags/index.html","comments":1,"_id":"clg9eeya80006hupkbojqbsb5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用 Cloudflare Tunnel 保护服务器","date":"2023-03-06T12:13:54.000Z","_content":"\n暴露在公网上的服务器被攻击是一件很令人烦恼的事情。本文将介绍如何通过 [Cloudflare Tunnel](https://one.dash.cloudflare.com)\n服务来一定程度上避免这一问题。\n\n<!-- more -->\n\n## 原理\n\n许多服务器被攻击的原因是公网 ip 暴露，而使用 Cloudflare Tunnel 后，所有的流量将先访问 Cloudflare 的服务器，随后通过\n服务器与 Cloudflare 服务器之间建立的连接传送数据，因此暴露在外的只有 Cloudflare 的服务器，源服务器将能够得到很好的隐藏。\n\n![Cloudflare Tunnel 原理图](https://pic.imgdb.cn/item/643155ee0d2dde5777b10933.jpg)\n\n同时，如果有内网穿透的需求，也可以使用，免去申请公网 ip，备案等麻烦操作。\n\n## 配置\n\n### 控制台\n\n首先需要注册一个 Cloudflare 账号。登陆后进入控制台，进入 **Zero Trust**，再选择 **Access** 下的 **Tunnels**，就进入了配置面板了。\n\n![Go to Zero Trust](https://pic.imgdb.cn/item/643155ef0d2dde5777b109b1.png)\n![Go to Tunnels](https://pic.imgdb.cn/item/643155ee0d2dde5777b10992.png)\n\n随后选择 `Create a channel`，并输入 Channel 的名称，在随后的界面中记录下 `Token`。\n\n![Get Token](https://pic.imgdb.cn/item/643155ee0d2dde5777b10958.png)\n\n至此就完成了控制台的创建操作。随后需要到服务器配置应用。\n\n### 服务器\n\n由于我通过 `Docker Compose` 配置服务器上的应用，此处就只介绍通过这一方法配置的具体步骤。\n\n首先，在 `docker-compose.yml` 中加入\n\n```yaml\ntunnel:\n    image: cloudflare/cloudflared\n    restart: unless-stopped\n    command: tunnel run\n    environment:\n      TUNNEL_TOKEN: \"TOKEN JUST GOT\"\n```\n\n由于 Cloudflare Tunnels 无法做到如 Nginx 一样根据不同的 path 转发到不同端口，因此如果有类似需求，可以在 docker 中再运行一个 nginx，\n监听不同的域名，并在配置控制台时将所有的域名转发到 nginx 的 80 端口。\n\n需要注意，如果原来配置了 https，http 自动 301 跳转至 https 等，需要去除相关配置，只需要保留监听 80 端口以及 http 相关配置即可。\n","source":"_posts/cloudflare-tunnel.md","raw":"---\ntitle: 使用 Cloudflare Tunnel 保护服务器\ndate: 2023-03-06 20:13:54\ntags: [ \"server\", \"cloudflare\", \"security\" ]\ncategory: \"技术向\"\n---\n\n暴露在公网上的服务器被攻击是一件很令人烦恼的事情。本文将介绍如何通过 [Cloudflare Tunnel](https://one.dash.cloudflare.com)\n服务来一定程度上避免这一问题。\n\n<!-- more -->\n\n## 原理\n\n许多服务器被攻击的原因是公网 ip 暴露，而使用 Cloudflare Tunnel 后，所有的流量将先访问 Cloudflare 的服务器，随后通过\n服务器与 Cloudflare 服务器之间建立的连接传送数据，因此暴露在外的只有 Cloudflare 的服务器，源服务器将能够得到很好的隐藏。\n\n![Cloudflare Tunnel 原理图](https://pic.imgdb.cn/item/643155ee0d2dde5777b10933.jpg)\n\n同时，如果有内网穿透的需求，也可以使用，免去申请公网 ip，备案等麻烦操作。\n\n## 配置\n\n### 控制台\n\n首先需要注册一个 Cloudflare 账号。登陆后进入控制台，进入 **Zero Trust**，再选择 **Access** 下的 **Tunnels**，就进入了配置面板了。\n\n![Go to Zero Trust](https://pic.imgdb.cn/item/643155ef0d2dde5777b109b1.png)\n![Go to Tunnels](https://pic.imgdb.cn/item/643155ee0d2dde5777b10992.png)\n\n随后选择 `Create a channel`，并输入 Channel 的名称，在随后的界面中记录下 `Token`。\n\n![Get Token](https://pic.imgdb.cn/item/643155ee0d2dde5777b10958.png)\n\n至此就完成了控制台的创建操作。随后需要到服务器配置应用。\n\n### 服务器\n\n由于我通过 `Docker Compose` 配置服务器上的应用，此处就只介绍通过这一方法配置的具体步骤。\n\n首先，在 `docker-compose.yml` 中加入\n\n```yaml\ntunnel:\n    image: cloudflare/cloudflared\n    restart: unless-stopped\n    command: tunnel run\n    environment:\n      TUNNEL_TOKEN: \"TOKEN JUST GOT\"\n```\n\n由于 Cloudflare Tunnels 无法做到如 Nginx 一样根据不同的 path 转发到不同端口，因此如果有类似需求，可以在 docker 中再运行一个 nginx，\n监听不同的域名，并在配置控制台时将所有的域名转发到 nginx 的 80 端口。\n\n需要注意，如果原来配置了 https，http 自动 301 跳转至 https 等，需要去除相关配置，只需要保留监听 80 端口以及 http 相关配置即可。\n","slug":"cloudflare-tunnel","published":1,"updated":"2023-04-08T11:54:57.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9eeya20001hupk84t1fke6","content":"<p>暴露在公网上的服务器被攻击是一件很令人烦恼的事情。本文将介绍如何通过 <a href=\"https://one.dash.cloudflare.com\" target=\"_blank\">Cloudflare Tunnel</a>\n服务来一定程度上避免这一问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>许多服务器被攻击的原因是公网 ip 暴露，而使用 Cloudflare Tunnel 后，所有的流量将先访问 Cloudflare 的服务器，随后通过\n服务器与 Cloudflare 服务器之间建立的连接传送数据，因此暴露在外的只有 Cloudflare 的服务器，源服务器将能够得到很好的隐藏。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10933.jpg\" alt=\"Cloudflare Tunnel 原理图\"></p>\n<p>同时，如果有内网穿透的需求，也可以使用，免去申请公网 ip，备案等麻烦操作。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"控制台\"><a href=\"#控制台\" class=\"headerlink\" title=\"控制台\"></a>控制台</h3><p>首先需要注册一个 Cloudflare 账号。登陆后进入控制台，进入 <strong>Zero Trust</strong>，再选择 <strong>Access</strong> 下的 <strong>Tunnels</strong>，就进入了配置面板了。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ef0d2dde5777b109b1.png\" alt=\"Go to Zero Trust\">\n<img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10992.png\" alt=\"Go to Tunnels\"></p>\n<p>随后选择 <code>Create a channel</code>，并输入 Channel 的名称，在随后的界面中记录下 <code>Token</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10958.png\" alt=\"Get Token\"></p>\n<p>至此就完成了控制台的创建操作。随后需要到服务器配置应用。</p>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><p>由于我通过 <code>Docker Compose</code> 配置服务器上的应用，此处就只介绍通过这一方法配置的具体步骤。</p>\n<p>首先，在 <code>docker-compose.yml</code> 中加入</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">tunnel</span><span style=\"color: var(--shiki-token-keyword)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">image</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">cloudflare/cloudflared</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">restart</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">unless-stopped</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">command</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">tunnel run</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">environment</span><span style=\"color: var(--shiki-token-keyword)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">      </span><span style=\"color: var(--shiki-token-keyword)\">TUNNEL_TOKEN</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;TOKEN JUST GOT&quot;</span></span></code></pre>\n\n<p>由于 Cloudflare Tunnels 无法做到如 Nginx 一样根据不同的 path 转发到不同端口，因此如果有类似需求，可以在 docker 中再运行一个 nginx，\n监听不同的域名，并在配置控制台时将所有的域名转发到 nginx 的 80 端口。</p>\n<p>需要注意，如果原来配置了 https，http 自动 301 跳转至 https 等，需要去除相关配置，只需要保留监听 80 端口以及 http 相关配置即可。</p>\n","site":{"data":{}},"excerpt":"<p>暴露在公网上的服务器被攻击是一件很令人烦恼的事情。本文将介绍如何通过 <a href=\"https://one.dash.cloudflare.com\" target=\"_blank\">Cloudflare Tunnel</a>\n服务来一定程度上避免这一问题。</p>","more":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>许多服务器被攻击的原因是公网 ip 暴露，而使用 Cloudflare Tunnel 后，所有的流量将先访问 Cloudflare 的服务器，随后通过\n服务器与 Cloudflare 服务器之间建立的连接传送数据，因此暴露在外的只有 Cloudflare 的服务器，源服务器将能够得到很好的隐藏。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10933.jpg\" alt=\"Cloudflare Tunnel 原理图\"></p>\n<p>同时，如果有内网穿透的需求，也可以使用，免去申请公网 ip，备案等麻烦操作。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"控制台\"><a href=\"#控制台\" class=\"headerlink\" title=\"控制台\"></a>控制台</h3><p>首先需要注册一个 Cloudflare 账号。登陆后进入控制台，进入 <strong>Zero Trust</strong>，再选择 <strong>Access</strong> 下的 <strong>Tunnels</strong>，就进入了配置面板了。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ef0d2dde5777b109b1.png\" alt=\"Go to Zero Trust\">\n<img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10992.png\" alt=\"Go to Tunnels\"></p>\n<p>随后选择 <code>Create a channel</code>，并输入 Channel 的名称，在随后的界面中记录下 <code>Token</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/643155ee0d2dde5777b10958.png\" alt=\"Get Token\"></p>\n<p>至此就完成了控制台的创建操作。随后需要到服务器配置应用。</p>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><p>由于我通过 <code>Docker Compose</code> 配置服务器上的应用，此处就只介绍通过这一方法配置的具体步骤。</p>\n<p>首先，在 <code>docker-compose.yml</code> 中加入</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">tunnel</span><span style=\"color: var(--shiki-token-keyword)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">image</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">cloudflare/cloudflared</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">restart</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">unless-stopped</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">command</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">tunnel run</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">environment</span><span style=\"color: var(--shiki-token-keyword)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">      </span><span style=\"color: var(--shiki-token-keyword)\">TUNNEL_TOKEN</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;TOKEN JUST GOT&quot;</span></span></code></pre>\n\n<p>由于 Cloudflare Tunnels 无法做到如 Nginx 一样根据不同的 path 转发到不同端口，因此如果有类似需求，可以在 docker 中再运行一个 nginx，\n监听不同的域名，并在配置控制台时将所有的域名转发到 nginx 的 80 端口。</p>\n<p>需要注意，如果原来配置了 https，http 自动 301 跳转至 https 等，需要去除相关配置，只需要保留监听 80 端口以及 http 相关配置即可。</p>"},{"title":"对文档的一些思考","date":"2022-11-01T05:31:49.000Z","_content":"\n在平时写代码时总会阅读许多文档，也因此对如何编写文档有了一些自己的看法。\n\n<!-- more -->\n\n## 起因\n\n最近正好在试着写一个 VS Code 的主题，因此需要对照官方文档里给出的 api 来编写大量\n内容。想起自己以前阅读过的各种各样的文档，也想总结一下我心目中文档的最佳形态。\n\n此处所指的文档仅包括应用程序或库的使用文档。由于目前正在阅读 VS Code 的文档，因此\n接下来的许多部分将提供 VS Code 的例子。\n\n## 应该有什么\n\n### 简单上手\n\n一份文档首先需要一个最简单的案例，让用户能够快速上手，体验到应用或库的重要内容，能够\n让用户迅速明白是否这是其正在寻找的解决方案。\n\n这样的一个案例不需要非常复杂。相反，应该简单易懂，给出一个简易的最佳实践。最好在完全\n不需要用户学习的情况下就能够体验到尽可能多的内容，防止因需要过久学习且缺少反馈而失去\n用户。\n\n在提供了最简案例后，需要给出几个详细案例。这些案例最好是开发者实际正在使用的简化版，\n用于解决该应用或库开发时希望能够解决的问题。这些案例通常是使用者找到这一应用或库后\n最希望解决的问题，因此需要提供这些案例来帮助使用者快速解决。\n\n最后，还可以提供一些链接来提供一条学习路线，方便开发者根据需求跳转学习。\n\n许多文档都会通过 `get started` 的部分来提供这一内容。\n\n![get started](https://pic.imgdb.cn/item/64314acb0d2dde5777990a2b.png)\n\n### 详细 api\n\n最后，如果是库且没有自动生成文档的能力，或是应用且具有扩展功能的，可以提供完整的\napi 给开发者以便使用。对每个 api 最好都有简单的注解，方便理解用途。如果是 ui 相关\n的 api，最好还能包括对应的截图。\n\n另外，许多 api 可能是相互关联的，因此最好能够加上跳转链接，方便查询使用。\n\n### 良好的排版\n\n文档应该有一个良好的排版来方便阅读。\n\n如果文档非常短，那么也许将所有内容写在一起是一个不错的选择，便于阅读的同时，页面\n显示的内容不会太少，让人觉得文档不用心。\n\n但如果内容较多，就应该做好分页工作，例如一个主题一页，帮助读者迅速找到需要的内容。\n如果一页里的内容依然非常多，就应该添加完善的目录。目录不应出现在文档的最上方，而应\n在不遮挡内容的前提下浮动在页面左右，便于随时跳转，以及明确阅读的进度。\n\n这里以 VS Code 的文档举例，内容相当丰富，虽然有些页面内容很多，但也有浮动的目录栏\n便于跳转。\n\n![vscode good example](https://pic.imgdb.cn/item/64314acb0d2dde5777990a73.png)\n\n但像[这里](https://code.visualstudio.com/api/references/theme-color)，就会出现内容\n过多，目录也无法显示完全的情况，对开发者不够友好。\n\n![vscode bad example](https://pic.imgdb.cn/item/64314aca0d2dde577799098e.png)\n\n## 一些总结\n\n以上这些内容是我读了许多文档之后，感触最深的一些内容。也许有时候自己也会因为懒而不\n好好写文档，无法满足上述这些要求，但是对于应用或库来说，文档的确是非常关键的一环。\n\n一份好的文档读起来应当是非常舒心的。应当帮助开发者迅速了解适用范围，并给出一些最佳\n实践，帮助开发者节省 debug 的时间。也能够在需要的时候提供足够的细节内容，如 api 等，\n使得开发者能快速找到问题的解决方案。\n","source":"_posts/document-thought.md","raw":"---\ntitle: 对文档的一些思考\ndate: 2022-11-01 13:31:49\ntags: [\n    \"document\",\n]\ncategory: \"思考分享\"\n---\n\n在平时写代码时总会阅读许多文档，也因此对如何编写文档有了一些自己的看法。\n\n<!-- more -->\n\n## 起因\n\n最近正好在试着写一个 VS Code 的主题，因此需要对照官方文档里给出的 api 来编写大量\n内容。想起自己以前阅读过的各种各样的文档，也想总结一下我心目中文档的最佳形态。\n\n此处所指的文档仅包括应用程序或库的使用文档。由于目前正在阅读 VS Code 的文档，因此\n接下来的许多部分将提供 VS Code 的例子。\n\n## 应该有什么\n\n### 简单上手\n\n一份文档首先需要一个最简单的案例，让用户能够快速上手，体验到应用或库的重要内容，能够\n让用户迅速明白是否这是其正在寻找的解决方案。\n\n这样的一个案例不需要非常复杂。相反，应该简单易懂，给出一个简易的最佳实践。最好在完全\n不需要用户学习的情况下就能够体验到尽可能多的内容，防止因需要过久学习且缺少反馈而失去\n用户。\n\n在提供了最简案例后，需要给出几个详细案例。这些案例最好是开发者实际正在使用的简化版，\n用于解决该应用或库开发时希望能够解决的问题。这些案例通常是使用者找到这一应用或库后\n最希望解决的问题，因此需要提供这些案例来帮助使用者快速解决。\n\n最后，还可以提供一些链接来提供一条学习路线，方便开发者根据需求跳转学习。\n\n许多文档都会通过 `get started` 的部分来提供这一内容。\n\n![get started](https://pic.imgdb.cn/item/64314acb0d2dde5777990a2b.png)\n\n### 详细 api\n\n最后，如果是库且没有自动生成文档的能力，或是应用且具有扩展功能的，可以提供完整的\napi 给开发者以便使用。对每个 api 最好都有简单的注解，方便理解用途。如果是 ui 相关\n的 api，最好还能包括对应的截图。\n\n另外，许多 api 可能是相互关联的，因此最好能够加上跳转链接，方便查询使用。\n\n### 良好的排版\n\n文档应该有一个良好的排版来方便阅读。\n\n如果文档非常短，那么也许将所有内容写在一起是一个不错的选择，便于阅读的同时，页面\n显示的内容不会太少，让人觉得文档不用心。\n\n但如果内容较多，就应该做好分页工作，例如一个主题一页，帮助读者迅速找到需要的内容。\n如果一页里的内容依然非常多，就应该添加完善的目录。目录不应出现在文档的最上方，而应\n在不遮挡内容的前提下浮动在页面左右，便于随时跳转，以及明确阅读的进度。\n\n这里以 VS Code 的文档举例，内容相当丰富，虽然有些页面内容很多，但也有浮动的目录栏\n便于跳转。\n\n![vscode good example](https://pic.imgdb.cn/item/64314acb0d2dde5777990a73.png)\n\n但像[这里](https://code.visualstudio.com/api/references/theme-color)，就会出现内容\n过多，目录也无法显示完全的情况，对开发者不够友好。\n\n![vscode bad example](https://pic.imgdb.cn/item/64314aca0d2dde577799098e.png)\n\n## 一些总结\n\n以上这些内容是我读了许多文档之后，感触最深的一些内容。也许有时候自己也会因为懒而不\n好好写文档，无法满足上述这些要求，但是对于应用或库来说，文档的确是非常关键的一环。\n\n一份好的文档读起来应当是非常舒心的。应当帮助开发者迅速了解适用范围，并给出一些最佳\n实践，帮助开发者节省 debug 的时间。也能够在需要的时候提供足够的细节内容，如 api 等，\n使得开发者能快速找到问题的解决方案。\n","slug":"document-thought","published":1,"updated":"2023-04-08T11:07:49.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9eeya50003hupk90i213ax","content":"<p>在平时写代码时总会阅读许多文档，也因此对如何编写文档有了一些自己的看法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近正好在试着写一个 VS Code 的主题，因此需要对照官方文档里给出的 api 来编写大量\n内容。想起自己以前阅读过的各种各样的文档，也想总结一下我心目中文档的最佳形态。</p>\n<p>此处所指的文档仅包括应用程序或库的使用文档。由于目前正在阅读 VS Code 的文档，因此\n接下来的许多部分将提供 VS Code 的例子。</p>\n<h2 id=\"应该有什么\"><a href=\"#应该有什么\" class=\"headerlink\" title=\"应该有什么\"></a>应该有什么</h2><h3 id=\"简单上手\"><a href=\"#简单上手\" class=\"headerlink\" title=\"简单上手\"></a>简单上手</h3><p>一份文档首先需要一个最简单的案例，让用户能够快速上手，体验到应用或库的重要内容，能够\n让用户迅速明白是否这是其正在寻找的解决方案。</p>\n<p>这样的一个案例不需要非常复杂。相反，应该简单易懂，给出一个简易的最佳实践。最好在完全\n不需要用户学习的情况下就能够体验到尽可能多的内容，防止因需要过久学习且缺少反馈而失去\n用户。</p>\n<p>在提供了最简案例后，需要给出几个详细案例。这些案例最好是开发者实际正在使用的简化版，\n用于解决该应用或库开发时希望能够解决的问题。这些案例通常是使用者找到这一应用或库后\n最希望解决的问题，因此需要提供这些案例来帮助使用者快速解决。</p>\n<p>最后，还可以提供一些链接来提供一条学习路线，方便开发者根据需求跳转学习。</p>\n<p>许多文档都会通过 <code>get started</code> 的部分来提供这一内容。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314acb0d2dde5777990a2b.png\" alt=\"get started\"></p>\n<h3 id=\"详细-api\"><a href=\"#详细-api\" class=\"headerlink\" title=\"详细 api\"></a>详细 api</h3><p>最后，如果是库且没有自动生成文档的能力，或是应用且具有扩展功能的，可以提供完整的\napi 给开发者以便使用。对每个 api 最好都有简单的注解，方便理解用途。如果是 ui 相关\n的 api，最好还能包括对应的截图。</p>\n<p>另外，许多 api 可能是相互关联的，因此最好能够加上跳转链接，方便查询使用。</p>\n<h3 id=\"良好的排版\"><a href=\"#良好的排版\" class=\"headerlink\" title=\"良好的排版\"></a>良好的排版</h3><p>文档应该有一个良好的排版来方便阅读。</p>\n<p>如果文档非常短，那么也许将所有内容写在一起是一个不错的选择，便于阅读的同时，页面\n显示的内容不会太少，让人觉得文档不用心。</p>\n<p>但如果内容较多，就应该做好分页工作，例如一个主题一页，帮助读者迅速找到需要的内容。\n如果一页里的内容依然非常多，就应该添加完善的目录。目录不应出现在文档的最上方，而应\n在不遮挡内容的前提下浮动在页面左右，便于随时跳转，以及明确阅读的进度。</p>\n<p>这里以 VS Code 的文档举例，内容相当丰富，虽然有些页面内容很多，但也有浮动的目录栏\n便于跳转。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314acb0d2dde5777990a73.png\" alt=\"vscode good example\"></p>\n<p>但像<a href=\"https://code.visualstudio.com/api/references/theme-color\" target=\"_blank\">这里</a>，就会出现内容\n过多，目录也无法显示完全的情况，对开发者不够友好。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314aca0d2dde577799098e.png\" alt=\"vscode bad example\"></p>\n<h2 id=\"一些总结\"><a href=\"#一些总结\" class=\"headerlink\" title=\"一些总结\"></a>一些总结</h2><p>以上这些内容是我读了许多文档之后，感触最深的一些内容。也许有时候自己也会因为懒而不\n好好写文档，无法满足上述这些要求，但是对于应用或库来说，文档的确是非常关键的一环。</p>\n<p>一份好的文档读起来应当是非常舒心的。应当帮助开发者迅速了解适用范围，并给出一些最佳\n实践，帮助开发者节省 debug 的时间。也能够在需要的时候提供足够的细节内容，如 api 等，\n使得开发者能快速找到问题的解决方案。</p>\n","site":{"data":{}},"excerpt":"<p>在平时写代码时总会阅读许多文档，也因此对如何编写文档有了一些自己的看法。</p>","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近正好在试着写一个 VS Code 的主题，因此需要对照官方文档里给出的 api 来编写大量\n内容。想起自己以前阅读过的各种各样的文档，也想总结一下我心目中文档的最佳形态。</p>\n<p>此处所指的文档仅包括应用程序或库的使用文档。由于目前正在阅读 VS Code 的文档，因此\n接下来的许多部分将提供 VS Code 的例子。</p>\n<h2 id=\"应该有什么\"><a href=\"#应该有什么\" class=\"headerlink\" title=\"应该有什么\"></a>应该有什么</h2><h3 id=\"简单上手\"><a href=\"#简单上手\" class=\"headerlink\" title=\"简单上手\"></a>简单上手</h3><p>一份文档首先需要一个最简单的案例，让用户能够快速上手，体验到应用或库的重要内容，能够\n让用户迅速明白是否这是其正在寻找的解决方案。</p>\n<p>这样的一个案例不需要非常复杂。相反，应该简单易懂，给出一个简易的最佳实践。最好在完全\n不需要用户学习的情况下就能够体验到尽可能多的内容，防止因需要过久学习且缺少反馈而失去\n用户。</p>\n<p>在提供了最简案例后，需要给出几个详细案例。这些案例最好是开发者实际正在使用的简化版，\n用于解决该应用或库开发时希望能够解决的问题。这些案例通常是使用者找到这一应用或库后\n最希望解决的问题，因此需要提供这些案例来帮助使用者快速解决。</p>\n<p>最后，还可以提供一些链接来提供一条学习路线，方便开发者根据需求跳转学习。</p>\n<p>许多文档都会通过 <code>get started</code> 的部分来提供这一内容。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314acb0d2dde5777990a2b.png\" alt=\"get started\"></p>\n<h3 id=\"详细-api\"><a href=\"#详细-api\" class=\"headerlink\" title=\"详细 api\"></a>详细 api</h3><p>最后，如果是库且没有自动生成文档的能力，或是应用且具有扩展功能的，可以提供完整的\napi 给开发者以便使用。对每个 api 最好都有简单的注解，方便理解用途。如果是 ui 相关\n的 api，最好还能包括对应的截图。</p>\n<p>另外，许多 api 可能是相互关联的，因此最好能够加上跳转链接，方便查询使用。</p>\n<h3 id=\"良好的排版\"><a href=\"#良好的排版\" class=\"headerlink\" title=\"良好的排版\"></a>良好的排版</h3><p>文档应该有一个良好的排版来方便阅读。</p>\n<p>如果文档非常短，那么也许将所有内容写在一起是一个不错的选择，便于阅读的同时，页面\n显示的内容不会太少，让人觉得文档不用心。</p>\n<p>但如果内容较多，就应该做好分页工作，例如一个主题一页，帮助读者迅速找到需要的内容。\n如果一页里的内容依然非常多，就应该添加完善的目录。目录不应出现在文档的最上方，而应\n在不遮挡内容的前提下浮动在页面左右，便于随时跳转，以及明确阅读的进度。</p>\n<p>这里以 VS Code 的文档举例，内容相当丰富，虽然有些页面内容很多，但也有浮动的目录栏\n便于跳转。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314acb0d2dde5777990a73.png\" alt=\"vscode good example\"></p>\n<p>但像<a href=\"https://code.visualstudio.com/api/references/theme-color\" target=\"_blank\">这里</a>，就会出现内容\n过多，目录也无法显示完全的情况，对开发者不够友好。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64314aca0d2dde577799098e.png\" alt=\"vscode bad example\"></p>\n<h2 id=\"一些总结\"><a href=\"#一些总结\" class=\"headerlink\" title=\"一些总结\"></a>一些总结</h2><p>以上这些内容是我读了许多文档之后，感触最深的一些内容。也许有时候自己也会因为懒而不\n好好写文档，无法满足上述这些要求，但是对于应用或库来说，文档的确是非常关键的一环。</p>\n<p>一份好的文档读起来应当是非常舒心的。应当帮助开发者迅速了解适用范围，并给出一些最佳\n实践，帮助开发者节省 debug 的时间。也能够在需要的时候提供足够的细节内容，如 api 等，\n使得开发者能快速找到问题的解决方案。</p>"},{"title":"Unicode 归一化","date":"2022-09-29T14:19:10.000Z","_content":"\nUnicode 表示方式不同，会导致字符串排序出现错误。\n\n<!-- more -->\n\nUnicode 有不同的编码方式来表现同一个字符。例如 `é` 可以通过 `\\u{e9}` 或 `e\\u{301}` 两种。\n\nJavaScript 在比较字符串时，会根据组成字符串的字符一一比较来确定大小，因此这种表示方式可能会导致\n两个看起来相同的字符串在比较时并不一致。\n\n```typescript\nconst string1 = \"caf\\u{e9}\";\nconst string2 = \"cafe\\u{301}\";\n\n// false\n// \\u{e9} !== e\nconsole.log(string1 === string2)\n```\n\n因此，可以通过归一化来使所有的字符串中的 Unicode 以同一种方式表示，防止出现这种情况。\n\n```typescript\nconst string1 = \"caf\\u{e9}\".normalize();\nconst string2 = \"cafe\\u{301}\".normalize();\n\n// true\n// string1 === string2 === \"caf\\u{e9}\"\nconsole.log(string1 === string2)\n```\n\n`normalize` 函数也能接受一个参数，用来指明具体归一化到哪一种表达形式。包括\n`NFC`, `NFD`, `NFKC`, `NFDC`。 `NFC` 为默认值。\n","source":"_posts/unicode-normalize.md","raw":"---\ntitle: Unicode 归一化\ndate: 2022-09-29 22:19:10\ntags: [\"unicode\"]\ncategory: \"小知识\"\n---\n\nUnicode 表示方式不同，会导致字符串排序出现错误。\n\n<!-- more -->\n\nUnicode 有不同的编码方式来表现同一个字符。例如 `é` 可以通过 `\\u{e9}` 或 `e\\u{301}` 两种。\n\nJavaScript 在比较字符串时，会根据组成字符串的字符一一比较来确定大小，因此这种表示方式可能会导致\n两个看起来相同的字符串在比较时并不一致。\n\n```typescript\nconst string1 = \"caf\\u{e9}\";\nconst string2 = \"cafe\\u{301}\";\n\n// false\n// \\u{e9} !== e\nconsole.log(string1 === string2)\n```\n\n因此，可以通过归一化来使所有的字符串中的 Unicode 以同一种方式表示，防止出现这种情况。\n\n```typescript\nconst string1 = \"caf\\u{e9}\".normalize();\nconst string2 = \"cafe\\u{301}\".normalize();\n\n// true\n// string1 === string2 === \"caf\\u{e9}\"\nconsole.log(string1 === string2)\n```\n\n`normalize` 函数也能接受一个参数，用来指明具体归一化到哪一种表达形式。包括\n`NFC`, `NFD`, `NFKC`, `NFDC`。 `NFC` 为默认值。\n","slug":"unicode-normalize","published":1,"updated":"2023-04-08T08:17:19.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9eeya80007hupk0rbx7cjg","content":"<p>Unicode 表示方式不同，会导致字符串排序出现错误。</p>\n<span id=\"more\"></span>\n\n<p>Unicode 有不同的编码方式来表现同一个字符。例如 <code>é</code> 可以通过 <code>\\u&#123;e9&#125;</code> 或 <code>e\\u&#123;301&#125;</code> 两种。</p>\n<p>JavaScript 在比较字符串时，会根据组成字符串的字符一一比较来确定大小，因此这种表示方式可能会导致\n两个看起来相同的字符串在比较时并不一致。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string1</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;caf\\u&#123;e9&#125;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string2</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;cafe\\u&#123;301&#125;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// false</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// \\u&#123;e9&#125; !== e</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-constant)\">console</span><span style=\"color: var(--shiki-token-function)\">.log</span><span style=\"color: var(--shiki-color-text)\">(string1 </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> string2)</span></span></code></pre>\n\n<p>因此，可以通过归一化来使所有的字符串中的 Unicode 以同一种方式表示，防止出现这种情况。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string1</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;caf\\u&#123;e9&#125;&quot;</span><span style=\"color: var(--shiki-token-function)\">.normalize</span><span style=\"color: var(--shiki-color-text)\">();</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string2</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;cafe\\u&#123;301&#125;&quot;</span><span style=\"color: var(--shiki-token-function)\">.normalize</span><span style=\"color: var(--shiki-color-text)\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// true</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// string1 === string2 === &quot;caf\\u&#123;e9&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-constant)\">console</span><span style=\"color: var(--shiki-token-function)\">.log</span><span style=\"color: var(--shiki-color-text)\">(string1 </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> string2)</span></span></code></pre>\n\n<p><code>normalize</code> 函数也能接受一个参数，用来指明具体归一化到哪一种表达形式。包括\n<code>NFC</code>, <code>NFD</code>, <code>NFKC</code>, <code>NFDC</code>。 <code>NFC</code> 为默认值。</p>\n","site":{"data":{}},"excerpt":"<p>Unicode 表示方式不同，会导致字符串排序出现错误。</p>","more":"<p>Unicode 有不同的编码方式来表现同一个字符。例如 <code>é</code> 可以通过 <code>\\u&#123;e9&#125;</code> 或 <code>e\\u&#123;301&#125;</code> 两种。</p>\n<p>JavaScript 在比较字符串时，会根据组成字符串的字符一一比较来确定大小，因此这种表示方式可能会导致\n两个看起来相同的字符串在比较时并不一致。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string1</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;caf\\u&#123;e9&#125;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string2</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;cafe\\u&#123;301&#125;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// false</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// \\u&#123;e9&#125; !== e</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-constant)\">console</span><span style=\"color: var(--shiki-token-function)\">.log</span><span style=\"color: var(--shiki-color-text)\">(string1 </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> string2)</span></span></code></pre>\n\n<p>因此，可以通过归一化来使所有的字符串中的 Unicode 以同一种方式表示，防止出现这种情况。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string1</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;caf\\u&#123;e9&#125;&quot;</span><span style=\"color: var(--shiki-token-function)\">.normalize</span><span style=\"color: var(--shiki-color-text)\">();</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">string2</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;cafe\\u&#123;301&#125;&quot;</span><span style=\"color: var(--shiki-token-function)\">.normalize</span><span style=\"color: var(--shiki-color-text)\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// true</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-comment)\">// string1 === string2 === &quot;caf\\u&#123;e9&#125;&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-constant)\">console</span><span style=\"color: var(--shiki-token-function)\">.log</span><span style=\"color: var(--shiki-color-text)\">(string1 </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> string2)</span></span></code></pre>\n\n<p><code>normalize</code> 函数也能接受一个参数，用来指明具体归一化到哪一种表达形式。包括\n<code>NFC</code>, <code>NFD</code>, <code>NFKC</code>, <code>NFDC</code>。 <code>NFC</code> 为默认值。</p>"},{"title":"实现一个用户友好的深色模式","date":"2023-04-03T11:03:24.000Z","_content":"\n现在越来越多的操作系统，浏览器都支持了深色模式，许多网页也提供了深色模式的选项。在重修我的博客的同时，我也为其增添了深色模式。但是在添加深色模式的过程中，发现了许多需要注意的地方，因此记录下来。\n\n<!--more-->\n\n## 为什么要有深色模式\n\n如今绝大多数的操作系统（如 macOS，iOS，windows，Android，Linux 等）都支持了夜间模式，会将系统的主题从亮色调成暗色。主流的浏览器（如 Safari，chrome 等）\n也能够支持自动夜间模式。而此时如果网页能够很好地支持深色模式，能够将其主题调整成暗色调，也就能够与系统或是浏览器更加和谐，提升用户的浏览体验。\n\n根据 [Can I Use](https://caniuse.com/?search=prefers-color-scheme) 的数据，目前已经有 94.37% 的浏览器支持这一功能。\n\n而一个网页若是不提供深色模式，就会在一片暗色调中显得十分突兀。不仅废眼，更会使得用户对网站的评价降低。\n\n## 如何实现深色模式\n\n要实现深色模式，需要使用 `prefers-color-scheme` 这一 CSS 媒体查询。目前绝大多数浏览器都支持，因此可以放心使用。具体\n配置时，可以通过 CSS Variable，或分开编写，或使用框架三种方式实现。\n\n### CSS Variable 实现\n\n通过为不同的 color scheme 编写不同的 variable 实现深色模式。\n\n```css\n:root {\n  --bg: #fff;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: #000;\n  }\n}\n\nbody {\n  background-color: var(--bg);\n}\n```\n\n### 直接分开编写\n\n或者直接编写具体的 CSS 而非 variable。\n\n```css\nbody {\n  background-color: #fff;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #000;\n  }\n}\n```\n\n### 使用框架实现\n\n使用例如 [tailwindcs](https://tailwindcss.com) 等 CSS 框架，实现深色模式。\n\n```html\n<div class=\"bg-white dark:bg-black\">\n```\n\n最后生成如下的 CSS\n\n```css\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:bg-black) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n```\n\n目前我使用的是第三种方式，即使用 tailwindcss 框架实现自动深色模式。\n\n## 实现缺陷\n\n### 实现用户选择模式\n\n使用 `prefers-color-scheme` 媒体查询实现深色模式固然十分方便，但却有着一定的问题。最大的问题就是无法让用户选择是否启用\n深色模式，网站只能够跟着操作系统或浏览器的选择自动切换。\n\n如果使用了 tailwindcss，那么它提供了一种配置方案，即不使用 `prefers-color-scheme` 自动切换，而是手动在根元素下添加\n`class=\"dark\"` 来识别出需要深色模式。这一切需要 javascript 来辅助完成用户切换模式的操作。\n\n用户可能会需要保持深色或浅色模式，也可能会选择保持自动切换模式，因此需要至少三种状态：`light`，`dark`，`auto`。自然能够\n想到将这一状态存在 `localStorage` 中，在网页加载时读取并提供对应的 CSS。要实现这一功能其实并不难，一段简单的 javascript 代码就能够完成。\n\n```typescript\nconst theme = localStorage.getItem(\"theme\") ?? \"auto\"\nswitch (theme) {\n    case \"light\":\n        document.documentElement.classList.remove(\"dark\");\n        break;\n    case \"dark\":\n        document.documentElement.classList.add(\"dark\");\n        break;\n    // 默认可以是 auto 模式。\n    default: {\n        if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n            document.documentElement.classList.add(\"dark\");\n        } else {\n            document.documentElement.classList.remove(\"dark\");\n        }\n        break;\n    }\n}\n```\n\n这样在用户选择时，只需要将 `localStorage` 中的 `theme` 设置成对应的值，并修改根元素对应的 `class` 即可。\n\n但这样还有一个问题：这样设置的 `class` 只有在用户修改时才会检测系统的暗色选项，无法跟随系统切换。因此还需要\n监听 `mediaquery` 才能在系统切换时跟着切换深色模式。\n\n这里只介绍 [React](https://react.dev/) 的写法。其他框架原理是类似的。\n\n```typescript\nconst matchFunc = (e: MediaQueryListEvent): void => {\n    const theme = localStorage.getItem(\"theme\");\n    if (theme === \"dark\" || theme === \"light\") return;\n    if (e.matches) {\n        document.documentElement.classList.add(\"dark\");\n    } else {\n        document.documentElement.classList.remove(\"dark\");\n    }\n};\n\nuseEffect(() => {\n    window\n        .matchMedia(\"(prefers-color-scheme: dark)\")\n        .addEventListener(\"change\", matchFunc);\n}, []);\n```\n\n这样就能实现满足用户具体需求的深色模式。用户可以在强制亮色，强制暗色\n以及自动调整之间自由切换。\n\n### 防止首屏闪白\n\n除此之外，还有一个小问题。由于使用框架后，代码需要在下载了一个较大\n的 js 文件后才会执行并修改色彩模式，因此会首先出现一段时间亮色，\n随后才会自动根据用户设置换成对应的色彩。\n\n这一问题可以通过在 `<head></head>` 中添加一段 `<script></scrit>` 标签，提前先为根元素添加对应的类名来解决\n\n```html\n<head>\n  <script>\n    try {\n      var e=localStorage.theme;e===\"dark\"\n        ? document.documentElement.classList.add(\"dark\")\n        : e === \"auto\"\n        ? (window.matchMedia(\"(prefers-color-scheme: dark)\").matches && document.documentElement.classList.add(\"dark\"))\n        : \"\";\n    } catch(e) {}\n  </script>\n</head>\n```\n\n在最外层包上一层 `try {} catch {}` 防止浏览器有不支持的情况。\n","source":"_posts/user-friendly-dark-mode.md","raw":"---\ntitle: 实现一个用户友好的深色模式\ndate: 2023-04-03 19:03:24\ncategory: \"技术向\"\ntags: [\"blog\"]\n---\n\n现在越来越多的操作系统，浏览器都支持了深色模式，许多网页也提供了深色模式的选项。在重修我的博客的同时，我也为其增添了深色模式。但是在添加深色模式的过程中，发现了许多需要注意的地方，因此记录下来。\n\n<!--more-->\n\n## 为什么要有深色模式\n\n如今绝大多数的操作系统（如 macOS，iOS，windows，Android，Linux 等）都支持了夜间模式，会将系统的主题从亮色调成暗色。主流的浏览器（如 Safari，chrome 等）\n也能够支持自动夜间模式。而此时如果网页能够很好地支持深色模式，能够将其主题调整成暗色调，也就能够与系统或是浏览器更加和谐，提升用户的浏览体验。\n\n根据 [Can I Use](https://caniuse.com/?search=prefers-color-scheme) 的数据，目前已经有 94.37% 的浏览器支持这一功能。\n\n而一个网页若是不提供深色模式，就会在一片暗色调中显得十分突兀。不仅废眼，更会使得用户对网站的评价降低。\n\n## 如何实现深色模式\n\n要实现深色模式，需要使用 `prefers-color-scheme` 这一 CSS 媒体查询。目前绝大多数浏览器都支持，因此可以放心使用。具体\n配置时，可以通过 CSS Variable，或分开编写，或使用框架三种方式实现。\n\n### CSS Variable 实现\n\n通过为不同的 color scheme 编写不同的 variable 实现深色模式。\n\n```css\n:root {\n  --bg: #fff;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: #000;\n  }\n}\n\nbody {\n  background-color: var(--bg);\n}\n```\n\n### 直接分开编写\n\n或者直接编写具体的 CSS 而非 variable。\n\n```css\nbody {\n  background-color: #fff;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: #000;\n  }\n}\n```\n\n### 使用框架实现\n\n使用例如 [tailwindcs](https://tailwindcss.com) 等 CSS 框架，实现深色模式。\n\n```html\n<div class=\"bg-white dark:bg-black\">\n```\n\n最后生成如下的 CSS\n\n```css\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:bg-black) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n```\n\n目前我使用的是第三种方式，即使用 tailwindcss 框架实现自动深色模式。\n\n## 实现缺陷\n\n### 实现用户选择模式\n\n使用 `prefers-color-scheme` 媒体查询实现深色模式固然十分方便，但却有着一定的问题。最大的问题就是无法让用户选择是否启用\n深色模式，网站只能够跟着操作系统或浏览器的选择自动切换。\n\n如果使用了 tailwindcss，那么它提供了一种配置方案，即不使用 `prefers-color-scheme` 自动切换，而是手动在根元素下添加\n`class=\"dark\"` 来识别出需要深色模式。这一切需要 javascript 来辅助完成用户切换模式的操作。\n\n用户可能会需要保持深色或浅色模式，也可能会选择保持自动切换模式，因此需要至少三种状态：`light`，`dark`，`auto`。自然能够\n想到将这一状态存在 `localStorage` 中，在网页加载时读取并提供对应的 CSS。要实现这一功能其实并不难，一段简单的 javascript 代码就能够完成。\n\n```typescript\nconst theme = localStorage.getItem(\"theme\") ?? \"auto\"\nswitch (theme) {\n    case \"light\":\n        document.documentElement.classList.remove(\"dark\");\n        break;\n    case \"dark\":\n        document.documentElement.classList.add(\"dark\");\n        break;\n    // 默认可以是 auto 模式。\n    default: {\n        if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n            document.documentElement.classList.add(\"dark\");\n        } else {\n            document.documentElement.classList.remove(\"dark\");\n        }\n        break;\n    }\n}\n```\n\n这样在用户选择时，只需要将 `localStorage` 中的 `theme` 设置成对应的值，并修改根元素对应的 `class` 即可。\n\n但这样还有一个问题：这样设置的 `class` 只有在用户修改时才会检测系统的暗色选项，无法跟随系统切换。因此还需要\n监听 `mediaquery` 才能在系统切换时跟着切换深色模式。\n\n这里只介绍 [React](https://react.dev/) 的写法。其他框架原理是类似的。\n\n```typescript\nconst matchFunc = (e: MediaQueryListEvent): void => {\n    const theme = localStorage.getItem(\"theme\");\n    if (theme === \"dark\" || theme === \"light\") return;\n    if (e.matches) {\n        document.documentElement.classList.add(\"dark\");\n    } else {\n        document.documentElement.classList.remove(\"dark\");\n    }\n};\n\nuseEffect(() => {\n    window\n        .matchMedia(\"(prefers-color-scheme: dark)\")\n        .addEventListener(\"change\", matchFunc);\n}, []);\n```\n\n这样就能实现满足用户具体需求的深色模式。用户可以在强制亮色，强制暗色\n以及自动调整之间自由切换。\n\n### 防止首屏闪白\n\n除此之外，还有一个小问题。由于使用框架后，代码需要在下载了一个较大\n的 js 文件后才会执行并修改色彩模式，因此会首先出现一段时间亮色，\n随后才会自动根据用户设置换成对应的色彩。\n\n这一问题可以通过在 `<head></head>` 中添加一段 `<script></scrit>` 标签，提前先为根元素添加对应的类名来解决\n\n```html\n<head>\n  <script>\n    try {\n      var e=localStorage.theme;e===\"dark\"\n        ? document.documentElement.classList.add(\"dark\")\n        : e === \"auto\"\n        ? (window.matchMedia(\"(prefers-color-scheme: dark)\").matches && document.documentElement.classList.add(\"dark\"))\n        : \"\";\n    } catch(e) {}\n  </script>\n</head>\n```\n\n在最外层包上一层 `try {} catch {}` 防止浏览器有不支持的情况。\n","slug":"user-friendly-dark-mode","published":1,"updated":"2023-04-08T09:05:37.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg9eeyaa000mhupk2owm2y06","content":"<p>现在越来越多的操作系统，浏览器都支持了深色模式，许多网页也提供了深色模式的选项。在重修我的博客的同时，我也为其增添了深色模式。但是在添加深色模式的过程中，发现了许多需要注意的地方，因此记录下来。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"为什么要有深色模式\"><a href=\"#为什么要有深色模式\" class=\"headerlink\" title=\"为什么要有深色模式\"></a>为什么要有深色模式</h2><p>如今绝大多数的操作系统（如 macOS，iOS，windows，Android，Linux 等）都支持了夜间模式，会将系统的主题从亮色调成暗色。主流的浏览器（如 Safari，chrome 等）\n也能够支持自动夜间模式。而此时如果网页能够很好地支持深色模式，能够将其主题调整成暗色调，也就能够与系统或是浏览器更加和谐，提升用户的浏览体验。</p>\n<p>根据 <a href=\"https://caniuse.com/?search=prefers-color-scheme\" target=\"_blank\">Can I Use</a> 的数据，目前已经有 94.37% 的浏览器支持这一功能。</p>\n<p>而一个网页若是不提供深色模式，就会在一片暗色调中显得十分突兀。不仅废眼，更会使得用户对网站的评价降低。</p>\n<h2 id=\"如何实现深色模式\"><a href=\"#如何实现深色模式\" class=\"headerlink\" title=\"如何实现深色模式\"></a>如何实现深色模式</h2><p>要实现深色模式，需要使用 <code>prefers-color-scheme</code> 这一 CSS 媒体查询。目前绝大多数浏览器都支持，因此可以放心使用。具体\n配置时，可以通过 CSS Variable，或分开编写，或使用框架三种方式实现。</p>\n<h3 id=\"CSS-Variable-实现\"><a href=\"#CSS-Variable-实现\" class=\"headerlink\" title=\"CSS Variable 实现\"></a>CSS Variable 实现</h3><p>通过为不同的 color scheme 编写不同的 variable 实现深色模式。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-function)\">:root</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --bg</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#fff</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">@media</span><span style=\"color: var(--shiki-color-text)\"> (prefers-color-scheme</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> dark) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-function)\">:root</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    --bg</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#000</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--bg)</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<h3 id=\"直接分开编写\"><a href=\"#直接分开编写\" class=\"headerlink\" title=\"直接分开编写\"></a>直接分开编写</h3><p>或者直接编写具体的 CSS 而非 variable。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#fff</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">@media</span><span style=\"color: var(--shiki-color-text)\"> (prefers-color-scheme</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> dark) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#000</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<h3 id=\"使用框架实现\"><a href=\"#使用框架实现\" class=\"headerlink\" title=\"使用框架实现\"></a>使用框架实现</h3><p>使用例如 <a href=\"https://tailwindcss.com\" target=\"_blank\">tailwindcs</a> 等 CSS 框架，实现深色模式。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;</span><span style=\"color: var(--shiki-token-string-expression)\">div</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">class</span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;bg-white dark:bg-black&quot;</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span></code></pre>\n\n<p>最后生成如下的 CSS</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-function)\">.bg-white</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --tw-bg-opacity</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">1</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">rgb</span><span style=\"color: var(--shiki-token-constant)\">(255 255 255 / </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--tw-bg-opacity))</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">:is(</span><span style=\"color: var(--shiki-token-function)\">.dark</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">.dark\\:bg-black</span><span style=\"color: var(--shiki-color-text)\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --tw-bg-opacity</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">1</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">rgb</span><span style=\"color: var(--shiki-token-constant)\">(0 0 0 / </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--tw-bg-opacity))</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<p>目前我使用的是第三种方式，即使用 tailwindcss 框架实现自动深色模式。</p>\n<h2 id=\"实现缺陷\"><a href=\"#实现缺陷\" class=\"headerlink\" title=\"实现缺陷\"></a>实现缺陷</h2><h3 id=\"实现用户选择模式\"><a href=\"#实现用户选择模式\" class=\"headerlink\" title=\"实现用户选择模式\"></a>实现用户选择模式</h3><p>使用 <code>prefers-color-scheme</code> 媒体查询实现深色模式固然十分方便，但却有着一定的问题。最大的问题就是无法让用户选择是否启用\n深色模式，网站只能够跟着操作系统或浏览器的选择自动切换。</p>\n<p>如果使用了 tailwindcss，那么它提供了一种配置方案，即不使用 <code>prefers-color-scheme</code> 自动切换，而是手动在根元素下添加\n<code>class=&quot;dark&quot;</code> 来识别出需要深色模式。这一切需要 javascript 来辅助完成用户切换模式的操作。</p>\n<p>用户可能会需要保持深色或浅色模式，也可能会选择保持自动切换模式，因此需要至少三种状态：<code>light</code>，<code>dark</code>，<code>auto</code>。自然能够\n想到将这一状态存在 <code>localStorage</code> 中，在网页加载时读取并提供对应的 CSS。要实现这一功能其实并不难，一段简单的 javascript 代码就能够完成。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">theme</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-token-function)\">.getItem</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;theme&quot;</span><span style=\"color: var(--shiki-color-text)\">) </span><span style=\"color: var(--shiki-token-keyword)\">??</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;auto&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">switch</span><span style=\"color: var(--shiki-color-text)\"> (theme) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">case</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;light&quot;</span><span style=\"color: var(--shiki-color-text)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">case</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-comment)\">// 默认可以是 auto 模式。</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">default</span><span style=\"color: var(--shiki-color-text)\">: &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">window</span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">).matches) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">            </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        &#125; </span><span style=\"color: var(--shiki-token-keyword)\">else</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">            </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<p>这样在用户选择时，只需要将 <code>localStorage</code> 中的 <code>theme</code> 设置成对应的值，并修改根元素对应的 <code>class</code> 即可。</p>\n<p>但这样还有一个问题：这样设置的 <code>class</code> 只有在用户修改时才会检测系统的暗色选项，无法跟随系统切换。因此还需要\n监听 <code>mediaquery</code> 才能在系统切换时跟着切换深色模式。</p>\n<p>这里只介绍 <a href=\"https://react.dev/\" target=\"_blank\">React</a> 的写法。其他框架原理是类似的。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">matchFunc</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> (e</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">MediaQueryListEvent</span><span style=\"color: var(--shiki-color-text)\">)</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">void</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">theme</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-token-function)\">.getItem</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;theme&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (theme </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">||</span><span style=\"color: var(--shiki-color-text)\"> theme </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;light&quot;</span><span style=\"color: var(--shiki-color-text)\">) </span><span style=\"color: var(--shiki-token-keyword)\">return</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">e</span><span style=\"color: var(--shiki-color-text)\">.matches) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125; </span><span style=\"color: var(--shiki-token-keyword)\">else</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-function)\">useEffect</span><span style=\"color: var(--shiki-color-text)\">(() </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    window</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">)</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-function)\">.addEventListener</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;change&quot;</span><span style=\"color: var(--shiki-token-punctuation)\">,</span><span style=\"color: var(--shiki-color-text)\"> matchFunc);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span><span style=\"color: var(--shiki-token-punctuation)\">,</span><span style=\"color: var(--shiki-color-text)\"> []);</span></span></code></pre>\n\n<p>这样就能实现满足用户具体需求的深色模式。用户可以在强制亮色，强制暗色\n以及自动调整之间自由切换。</p>\n<h3 id=\"防止首屏闪白\"><a href=\"#防止首屏闪白\" class=\"headerlink\" title=\"防止首屏闪白\"></a>防止首屏闪白</h3><p>除此之外，还有一个小问题。由于使用框架后，代码需要在下载了一个较大\n的 js 文件后才会执行并修改色彩模式，因此会首先出现一段时间亮色，\n随后才会自动根据用户设置换成对应的色彩。</p>\n<p>这一问题可以通过在 <code>&lt;head&gt;&lt;/head&gt;</code> 中添加一段 <code>&lt;script&gt;&lt;/scrit&gt;</code> 标签，提前先为根元素添加对应的类名来解决</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;</span><span style=\"color: var(--shiki-token-string-expression)\">head</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &lt;</span><span style=\"color: var(--shiki-token-string-expression)\">script</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">try</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">      </span><span style=\"color: var(--shiki-token-keyword)\">var</span><span style=\"color: var(--shiki-color-text)\"> e</span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-color-text)\">.theme;e</span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">?</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">)</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> e </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;auto&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">?</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">window</span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">).matches </span><span style=\"color: var(--shiki-token-keyword)\">&amp;&amp;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">))</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125; </span><span style=\"color: var(--shiki-token-keyword)\">catch</span><span style=\"color: var(--shiki-color-text)\">(e) &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &lt;/</span><span style=\"color: var(--shiki-token-string-expression)\">script</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;/</span><span style=\"color: var(--shiki-token-string-expression)\">head</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span></code></pre>\n\n<p>在最外层包上一层 <code>try &#123;&#125; catch &#123;&#125;</code> 防止浏览器有不支持的情况。</p>\n","site":{"data":{}},"excerpt":"<p>现在越来越多的操作系统，浏览器都支持了深色模式，许多网页也提供了深色模式的选项。在重修我的博客的同时，我也为其增添了深色模式。但是在添加深色模式的过程中，发现了许多需要注意的地方，因此记录下来。</p>","more":"<h2 id=\"为什么要有深色模式\"><a href=\"#为什么要有深色模式\" class=\"headerlink\" title=\"为什么要有深色模式\"></a>为什么要有深色模式</h2><p>如今绝大多数的操作系统（如 macOS，iOS，windows，Android，Linux 等）都支持了夜间模式，会将系统的主题从亮色调成暗色。主流的浏览器（如 Safari，chrome 等）\n也能够支持自动夜间模式。而此时如果网页能够很好地支持深色模式，能够将其主题调整成暗色调，也就能够与系统或是浏览器更加和谐，提升用户的浏览体验。</p>\n<p>根据 <a href=\"https://caniuse.com/?search=prefers-color-scheme\" target=\"_blank\">Can I Use</a> 的数据，目前已经有 94.37% 的浏览器支持这一功能。</p>\n<p>而一个网页若是不提供深色模式，就会在一片暗色调中显得十分突兀。不仅废眼，更会使得用户对网站的评价降低。</p>\n<h2 id=\"如何实现深色模式\"><a href=\"#如何实现深色模式\" class=\"headerlink\" title=\"如何实现深色模式\"></a>如何实现深色模式</h2><p>要实现深色模式，需要使用 <code>prefers-color-scheme</code> 这一 CSS 媒体查询。目前绝大多数浏览器都支持，因此可以放心使用。具体\n配置时，可以通过 CSS Variable，或分开编写，或使用框架三种方式实现。</p>\n<h3 id=\"CSS-Variable-实现\"><a href=\"#CSS-Variable-实现\" class=\"headerlink\" title=\"CSS Variable 实现\"></a>CSS Variable 实现</h3><p>通过为不同的 color scheme 编写不同的 variable 实现深色模式。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-function)\">:root</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --bg</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#fff</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">@media</span><span style=\"color: var(--shiki-color-text)\"> (prefers-color-scheme</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> dark) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-function)\">:root</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    --bg</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#000</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--bg)</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<h3 id=\"直接分开编写\"><a href=\"#直接分开编写\" class=\"headerlink\" title=\"直接分开编写\"></a>直接分开编写</h3><p>或者直接编写具体的 CSS 而非 variable。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#fff</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">@media</span><span style=\"color: var(--shiki-color-text)\"> (prefers-color-scheme</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> dark) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-string-expression)\">body</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">#000</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<h3 id=\"使用框架实现\"><a href=\"#使用框架实现\" class=\"headerlink\" title=\"使用框架实现\"></a>使用框架实现</h3><p>使用例如 <a href=\"https://tailwindcss.com\" target=\"_blank\">tailwindcs</a> 等 CSS 框架，实现深色模式。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;</span><span style=\"color: var(--shiki-token-string-expression)\">div</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">class</span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;bg-white dark:bg-black&quot;</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span></code></pre>\n\n<p>最后生成如下的 CSS</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-function)\">.bg-white</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --tw-bg-opacity</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">1</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">rgb</span><span style=\"color: var(--shiki-token-constant)\">(255 255 255 / </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--tw-bg-opacity))</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">:is(</span><span style=\"color: var(--shiki-token-function)\">.dark</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">.dark\\:bg-black</span><span style=\"color: var(--shiki-color-text)\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  --tw-bg-opacity</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">1</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  </span><span style=\"color: var(--shiki-token-constant)\">background-color</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">rgb</span><span style=\"color: var(--shiki-token-constant)\">(0 0 0 / </span><span style=\"color: var(--shiki-token-function)\">var</span><span style=\"color: var(--shiki-token-constant)\">(--tw-bg-opacity))</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<p>目前我使用的是第三种方式，即使用 tailwindcss 框架实现自动深色模式。</p>\n<h2 id=\"实现缺陷\"><a href=\"#实现缺陷\" class=\"headerlink\" title=\"实现缺陷\"></a>实现缺陷</h2><h3 id=\"实现用户选择模式\"><a href=\"#实现用户选择模式\" class=\"headerlink\" title=\"实现用户选择模式\"></a>实现用户选择模式</h3><p>使用 <code>prefers-color-scheme</code> 媒体查询实现深色模式固然十分方便，但却有着一定的问题。最大的问题就是无法让用户选择是否启用\n深色模式，网站只能够跟着操作系统或浏览器的选择自动切换。</p>\n<p>如果使用了 tailwindcss，那么它提供了一种配置方案，即不使用 <code>prefers-color-scheme</code> 自动切换，而是手动在根元素下添加\n<code>class=&quot;dark&quot;</code> 来识别出需要深色模式。这一切需要 javascript 来辅助完成用户切换模式的操作。</p>\n<p>用户可能会需要保持深色或浅色模式，也可能会选择保持自动切换模式，因此需要至少三种状态：<code>light</code>，<code>dark</code>，<code>auto</code>。自然能够\n想到将这一状态存在 <code>localStorage</code> 中，在网页加载时读取并提供对应的 CSS。要实现这一功能其实并不难，一段简单的 javascript 代码就能够完成。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">theme</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-token-function)\">.getItem</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;theme&quot;</span><span style=\"color: var(--shiki-color-text)\">) </span><span style=\"color: var(--shiki-token-keyword)\">??</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;auto&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">switch</span><span style=\"color: var(--shiki-color-text)\"> (theme) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">case</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;light&quot;</span><span style=\"color: var(--shiki-color-text)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">case</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">:</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-comment)\">// 默认可以是 auto 模式。</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">default</span><span style=\"color: var(--shiki-color-text)\">: &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">window</span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">).matches) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">            </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        &#125; </span><span style=\"color: var(--shiki-token-keyword)\">else</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">            </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">break</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span></span></code></pre>\n\n<p>这样在用户选择时，只需要将 <code>localStorage</code> 中的 <code>theme</code> 设置成对应的值，并修改根元素对应的 <code>class</code> 即可。</p>\n<p>但这样还有一个问题：这样设置的 <code>class</code> 只有在用户修改时才会检测系统的暗色选项，无法跟随系统切换。因此还需要\n监听 <code>mediaquery</code> 才能在系统切换时跟着切换深色模式。</p>\n<p>这里只介绍 <a href=\"https://react.dev/\" target=\"_blank\">React</a> 的写法。其他框架原理是类似的。</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">matchFunc</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> (e</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">MediaQueryListEvent</span><span style=\"color: var(--shiki-color-text)\">)</span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">void</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">const</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">theme</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-token-function)\">.getItem</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;theme&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (theme </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">||</span><span style=\"color: var(--shiki-color-text)\"> theme </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;light&quot;</span><span style=\"color: var(--shiki-color-text)\">) </span><span style=\"color: var(--shiki-token-keyword)\">return</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">if</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">e</span><span style=\"color: var(--shiki-color-text)\">.matches) &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125; </span><span style=\"color: var(--shiki-token-keyword)\">else</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.remove</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: var(--shiki-token-function)\">useEffect</span><span style=\"color: var(--shiki-color-text)\">(() </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    window</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">)</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-function)\">.addEventListener</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;change&quot;</span><span style=\"color: var(--shiki-token-punctuation)\">,</span><span style=\"color: var(--shiki-color-text)\"> matchFunc);</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&#125;</span><span style=\"color: var(--shiki-token-punctuation)\">,</span><span style=\"color: var(--shiki-color-text)\"> []);</span></span></code></pre>\n\n<p>这样就能实现满足用户具体需求的深色模式。用户可以在强制亮色，强制暗色\n以及自动调整之间自由切换。</p>\n<h3 id=\"防止首屏闪白\"><a href=\"#防止首屏闪白\" class=\"headerlink\" title=\"防止首屏闪白\"></a>防止首屏闪白</h3><p>除此之外，还有一个小问题。由于使用框架后，代码需要在下载了一个较大\n的 js 文件后才会执行并修改色彩模式，因此会首先出现一段时间亮色，\n随后才会自动根据用户设置换成对应的色彩。</p>\n<p>这一问题可以通过在 <code>&lt;head&gt;&lt;/head&gt;</code> 中添加一段 <code>&lt;script&gt;&lt;/scrit&gt;</code> 标签，提前先为根元素添加对应的类名来解决</p>\n<pre class=\"shiki css-variables\" style=\"background-color: var(--shiki-color-background)\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;</span><span style=\"color: var(--shiki-token-string-expression)\">head</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &lt;</span><span style=\"color: var(--shiki-token-string-expression)\">script</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    </span><span style=\"color: var(--shiki-token-keyword)\">try</span><span style=\"color: var(--shiki-color-text)\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">      </span><span style=\"color: var(--shiki-token-keyword)\">var</span><span style=\"color: var(--shiki-color-text)\"> e</span><span style=\"color: var(--shiki-token-keyword)\">=</span><span style=\"color: var(--shiki-token-constant)\">localStorage</span><span style=\"color: var(--shiki-color-text)\">.theme;e</span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">?</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">)</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> e </span><span style=\"color: var(--shiki-token-keyword)\">===</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;auto&quot;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">?</span><span style=\"color: var(--shiki-color-text)\"> (</span><span style=\"color: var(--shiki-token-constant)\">window</span><span style=\"color: var(--shiki-token-function)\">.matchMedia</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;(prefers-color-scheme: dark)&quot;</span><span style=\"color: var(--shiki-color-text)\">).matches </span><span style=\"color: var(--shiki-token-keyword)\">&amp;&amp;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">document</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">documentElement</span><span style=\"color: var(--shiki-token-function)\">.</span><span style=\"color: var(--shiki-token-constant)\">classList</span><span style=\"color: var(--shiki-token-function)\">.add</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-string-expression)\">&quot;dark&quot;</span><span style=\"color: var(--shiki-color-text)\">))</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">        </span><span style=\"color: var(--shiki-token-keyword)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string-expression)\">&quot;&quot;</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">    &#125; </span><span style=\"color: var(--shiki-token-keyword)\">catch</span><span style=\"color: var(--shiki-color-text)\">(e) &#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">  &lt;/</span><span style=\"color: var(--shiki-token-string-expression)\">script</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: var(--shiki-color-text)\">&lt;/</span><span style=\"color: var(--shiki-token-string-expression)\">head</span><span style=\"color: var(--shiki-color-text)\">&gt;</span></span></code></pre>\n\n<p>在最外层包上一层 <code>try &#123;&#125; catch &#123;&#125;</code> 防止浏览器有不支持的情况。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clg9eeya20001hupk84t1fke6","category_id":"clg9eeya60004hupk04du0jho","_id":"clg9eeya9000ahupk1iy9axtu"},{"post_id":"clg9eeya50003hupk90i213ax","category_id":"clg9eeya90008hupkgt2f4jd2","_id":"clg9eeyaa000dhupkftgk2cxe"},{"post_id":"clg9eeya80007hupk0rbx7cjg","category_id":"clg9eeya9000bhupk6m508aed","_id":"clg9eeyaa000hhupk1j3m0xu4"},{"post_id":"clg9eeyaa000mhupk2owm2y06","category_id":"clg9eeya60004hupk04du0jho","_id":"clg9eeyab000ohupk2j300ipy"}],"PostTag":[{"post_id":"clg9eeya20001hupk84t1fke6","tag_id":"clg9eeya70005hupk79j42a7c","_id":"clg9eeyaa000fhupk74tc8i47"},{"post_id":"clg9eeya20001hupk84t1fke6","tag_id":"clg9eeya90009hupk90382lee","_id":"clg9eeyaa000ghupkg83d3g5a"},{"post_id":"clg9eeya20001hupk84t1fke6","tag_id":"clg9eeya9000chupkfgfhb3g7","_id":"clg9eeyaa000jhupkh8uyc4gz"},{"post_id":"clg9eeya50003hupk90i213ax","tag_id":"clg9eeyaa000ehupk0z4db8ro","_id":"clg9eeyaa000khupkfufn3pza"},{"post_id":"clg9eeya80007hupk0rbx7cjg","tag_id":"clg9eeyaa000ihupk2tadakk0","_id":"clg9eeyaa000lhupkdb9v5r71"},{"post_id":"clg9eeyaa000mhupk2owm2y06","tag_id":"clg9eeyab000nhupkgpayf1dy","_id":"clg9eeyab000phupk0noh1wqh"}],"Tag":[{"name":"server","_id":"clg9eeya70005hupk79j42a7c"},{"name":"cloudflare","_id":"clg9eeya90009hupk90382lee"},{"name":"security","_id":"clg9eeya9000chupkfgfhb3g7"},{"name":"document","_id":"clg9eeyaa000ehupk0z4db8ro"},{"name":"unicode","_id":"clg9eeyaa000ihupk2tadakk0"},{"name":"blog","_id":"clg9eeyab000nhupkgpayf1dy"}]}}